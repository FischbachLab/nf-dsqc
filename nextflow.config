manifest {
  name = 'DSQC'
  author = 'Xiandong Meng'
  homePage = 'https://github.com/fischbachlab/nf-dsqc'
  description = 'Analyze the missed and unmapped reads after ninjaMap processing'
  mainScript = 'main.nf'
  version = '0.0.1'
  defaultBranch = 'main' //github branch name
}

params {
  seedfile= ""
  project = "DSQC_00"
  outdir = "s3://genomics-workflow-core/Results/DSQC"
  blast_db = "/mnt/efs/databases/Blast/core_nt/db/core_nt"
  // "/mnt/efs/databases/Blast/nt/db/nt"
  taxonkit_db = "/mnt/efs/databases/Blast/taxdump/"
  blast_perc_identity = 100
  bam_perc_identity = 98
  read_num_thres = 10000
  anticipated_genomes="/mnt/efs/databases/DSQC/246_Blast_no_duplicated_214_taxaid.tsv"

  docker_container = "458432034220.dkr.ecr.us-west-2.amazonaws.com/nf-ninjamap:latest"
  docker_container_blast = 'ncbi/blast:latest' 
  //'458432034220.dkr.ecr.us-west-2.amazonaws.com/ncbi/blast:20230822'
  docker_container_taxonkit = 'quay.io/biocontainers/taxonkit:0.16.0--h9ee0642_1'
  docker_container_report = '458432034220.dkr.ecr.us-west-2.amazonaws.com/nf-sanger:latest'
}

includeConfig "$baseDir/conf/aws_batch.config"

process {
  maxRetries = 0
	executor = 'awsbatch'
	queue = "default-maf-pipelines"
	cleanup = true
  cache = false

  time = '24h'
  cpus = 8
  memory = '16 GB'
  errorStrategy = 'ignore'

  withName: SamplePreprocess_missed
    {
      time = '8h'
      cpus = 8
      memory = '16 GB'
      errorStrategy = 'ignore'
    }
  withName: BLASTS
    {
      time = '96h'
      cpus = 16
      memory = '64 GB'
      errorStrategy = 'ignore'
    }
  withName: SamplePostprocess_unmapped
    {
      time = '240h'
      cpus = 8
      memory = '16 GB'
      errorStrategy = 'ignore'
    }
  withName: SamplePostprocess_missed
    {
      time = '128h'
      cpus = 8
      memory = '16 GB'
      errorStrategy = 'ignore'
    }

}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  //singularity { singularity.enabled = true }
  //test { includeConfig 'conf/test.config' }
}


timeline {
  enabled = false
  overwrite = true
  file = "$params.outdir/$params.project/execution_reports/timeline.html"
}

report {
  enabled = false
  overwrite = true
  file = "$params.outdir/$params.project/execution_reports/report.html"
}

dag {
    enabled = false
    overwrite = true
    file = "$params.outdir/$params.project/execution_reports/pipeline_dag.html"
}
